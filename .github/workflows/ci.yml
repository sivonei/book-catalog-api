name: Django CI

# This GitHub Actions workflow is designed to run tests for a Django application
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

    # This workflow is triggered on pushes and pull requests to the main branch.
jobs:
  build-test:
    runs-on: ubuntu-latest

    services: 
      postgres: # This service runs a PostgreSQL database container
        image: postgres:14
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      DB_HOST: localhost
      DB_PORT: 5432

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set up Python # This step sets up Python 3.11 for the workflow
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies # This step installs the required Python packages from requirements.txt
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    
    - name: Run tests # This step runs the Django tests using the manage.py script
      run: |
        python manage.py migrate
        python manage.py test

    # This step logs in to GitHub Container Registry (GHCR) using a Personal Access Token (PAT) stored in GitHub Secrets
    - name: Login to GHCR 
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

       # This step builds and pushes the Docker image to GitHub Container Registry (GHCR) 
    - name: Build and push Docker image to GHCR
      env:
        IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/book-catalog-api:latest
      run: |
        docker build -t $IMAGE_NAME .
        docker push $IMAGE_NAME